=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::MetricsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MetricsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::MetricsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MetricsApi' do
    it 'should create an instance of MetricsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::MetricsApi)
    end
  end

  # unit tests for get_game_ppa
  # Get team game averages for Predicted Points Added (PPA)
  # Predicted Points Added (PPA) by game
  # @param year Year filter
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :week Week filter
  # @option opts [String] :team Team filter
  # @option opts [String] :conference Conference filter
  # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
  # @return [Array<GamePPA>]
  describe 'get_game_ppa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_player_game_ppa
  # Get player game averages for Predicted Points Added (PPA)
  # Predicted Points Added (PPA) by player game
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :year Year filter
  # @option opts [Integer] :week Week filter
  # @option opts [String] :team Team filter
  # @option opts [String] :position Position abbreviation filter
  # @option opts [Integer] :player_id Player id filter
  # @option opts [String] :threshold Minimum play threshold filter
  # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
  # @return [Array<PlayerGamePPA>]
  describe 'get_player_game_ppa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_player_season_ppa
  # Get player season averages for Predicted Points Added (PPA)
  # Predicted Points Added (PPA) by player season
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :year Year filter
  # @option opts [String] :team Team filter
  # @option opts [String] :conference Conference abbreviation filter
  # @option opts [String] :position Position abbreviation filter
  # @option opts [Integer] :player_id Player id filter
  # @option opts [String] :threshold Minimum play threshold filter
  # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
  # @return [Array<PlayerSeasonPPA>]
  describe 'get_player_season_ppa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_predicted_points
  # Calculate Predicted Points
  # Predicted Points
  # @param down Down filter
  # @param distance Distance filter
  # @param [Hash] opts the optional parameters
  # @return [Array<PredictedPoints>]
  describe 'get_predicted_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pregame_win_probabilities
  # Get pregame win probabilities
  # Pregame win probabilities
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :year Year filter
  # @option opts [Integer] :week Week filter
  # @option opts [String] :team Team filter
  # @return [Array<PregameWP>]
  describe 'get_pregame_win_probabilities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_team_ppa
  # Get team averages for Predicted Points Added (PPA)
  # Predicted Points Added (PPA)
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :year Year filter (required if team not specified)
  # @option opts [String] :team Team filter (required if year not specified)
  # @option opts [String] :conference Conference filter
  # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
  # @return [Array<TeamPPA>]
  describe 'get_team_ppa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_win_probability_data
  # Get win probability chart data
  # Win probability data
  # @param game_id Game id filter
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :adjust_for_spread Toggles pregame spread adjustments
  # @return [Array<PlayWP>]
  describe 'get_win_probability_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

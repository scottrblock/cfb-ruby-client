=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module SwaggerClient
  class PlaysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get play stat type lists
    # Type of play stats
    # @param [Hash] opts the optional parameters
    # @return [Array<PlayStatType>]
    def get_play_stat_types(opts = {})
      data, _status_code, _headers = get_play_stat_types_with_http_info(opts)
      data
    end

    # Get play stat type lists
    # Type of play stats
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PlayStatType>, Fixnum, Hash)>] Array<PlayStatType> data, response status code and response headers
    def get_play_stat_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaysApi.get_play_stat_types ...'
      end
      # resource path
      local_var_path = '/play/stat/types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayStatType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaysApi#get_play_stat_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get play statistics
    # Gets player stats associated by play (limit 1000)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @option opts [Integer] :game_id gameId filter (from /games endpoint)
    # @option opts [Integer] :athlete_id athleteId filter (from /roster endpoint)
    # @option opts [Integer] :stat_type_id statTypeId filter (from /play/stat/types endpoint)
    # @return [Array<PlayStat>]
    def get_play_stats(opts = {})
      data, _status_code, _headers = get_play_stats_with_http_info(opts)
      data
    end

    # Get play statistics
    # Gets player stats associated by play (limit 1000)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @option opts [Integer] :game_id gameId filter (from /games endpoint)
    # @option opts [Integer] :athlete_id athleteId filter (from /roster endpoint)
    # @option opts [Integer] :stat_type_id statTypeId filter (from /play/stat/types endpoint)
    # @return [Array<(Array<PlayStat>, Fixnum, Hash)>] Array<PlayStat> data, response status code and response headers
    def get_play_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaysApi.get_play_stats ...'
      end
      # resource path
      local_var_path = '/play/stats'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'week'] = opts[:'week'] if !opts[:'week'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'gameId'] = opts[:'game_id'] if !opts[:'game_id'].nil?
      query_params[:'athleteId'] = opts[:'athlete_id'] if !opts[:'athlete_id'].nil?
      query_params[:'statTypeId'] = opts[:'stat_type_id'] if !opts[:'stat_type_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaysApi#get_play_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get play type list
    # Types of plays
    # @param [Hash] opts the optional parameters
    # @return [Array<PlayType>]
    def get_play_types(opts = {})
      data, _status_code, _headers = get_play_types_with_http_info(opts)
      data
    end

    # Get play type list
    # Types of plays
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PlayType>, Fixnum, Hash)>] Array<PlayType> data, response status code and response headers
    def get_play_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaysApi.get_play_types ...'
      end
      # resource path
      local_var_path = '/play/types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaysApi#get_play_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get play information. Requires either a week or team to be specified.
    # Play results
    # @param year Year filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :season_type Season type filter (default to regular)
    # @option opts [Integer] :week Week filter (required if team, offense, or defense, not specified)
    # @option opts [String] :team Team filter
    # @option opts [String] :offense Offensive team filter
    # @option opts [String] :defense Defensive team filter
    # @option opts [String] :conference Conference filter
    # @option opts [String] :offense_conference Offensive conference filter
    # @option opts [String] :defense_conference Defensive conference filter
    # @option opts [Integer] :play_type Play type filter
    # @return [Array<Play>]
    def get_plays(year, opts = {})
      data, _status_code, _headers = get_plays_with_http_info(year, opts)
      data
    end

    # Get play information. Requires either a week or team to be specified.
    # Play results
    # @param year Year filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :season_type Season type filter
    # @option opts [Integer] :week Week filter (required if team, offense, or defense, not specified)
    # @option opts [String] :team Team filter
    # @option opts [String] :offense Offensive team filter
    # @option opts [String] :defense Defensive team filter
    # @option opts [String] :conference Conference filter
    # @option opts [String] :offense_conference Offensive conference filter
    # @option opts [String] :defense_conference Defensive conference filter
    # @option opts [Integer] :play_type Play type filter
    # @return [Array<(Array<Play>, Fixnum, Hash)>] Array<Play> data, response status code and response headers
    def get_plays_with_http_info(year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaysApi.get_plays ...'
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling PlaysApi.get_plays"
      end
      # resource path
      local_var_path = '/plays'

      # query parameters
      query_params = {}
      query_params[:'year'] = year
      query_params[:'seasonType'] = opts[:'season_type'] if !opts[:'season_type'].nil?
      query_params[:'week'] = opts[:'week'] if !opts[:'week'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'offense'] = opts[:'offense'] if !opts[:'offense'].nil?
      query_params[:'defense'] = opts[:'defense'] if !opts[:'defense'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?
      query_params[:'offenseConference'] = opts[:'offense_conference'] if !opts[:'offense_conference'].nil?
      query_params[:'defenseConference'] = opts[:'defense_conference'] if !opts[:'defense_conference'].nil?
      query_params[:'playType'] = opts[:'play_type'] if !opts[:'play_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Play>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaysApi#get_plays\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

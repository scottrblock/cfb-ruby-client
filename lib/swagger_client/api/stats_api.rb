=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module SwaggerClient
  class StatsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get advanced game team stats
    # Advanced team game stats
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if no team specified)
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter (required if no year specified)
    # @option opts [String] :opponent Opponent filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<AdvancedGameStat>]
    def get_advanced_team_game_stats(opts = {})
      data, _status_code, _headers = get_advanced_team_game_stats_with_http_info(opts)
      data
    end

    # Get advanced game team stats
    # Advanced team game stats
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if no team specified)
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter (required if no year specified)
    # @option opts [String] :opponent Opponent filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<(Array<AdvancedGameStat>, Fixnum, Hash)>] Array<AdvancedGameStat> data, response status code and response headers
    def get_advanced_team_game_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatsApi.get_advanced_team_game_stats ...'
      end
      # resource path
      local_var_path = '/stats/game/advanced'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'week'] = opts[:'week'] if !opts[:'week'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'opponent'] = opts[:'opponent'] if !opts[:'opponent'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AdvancedGameStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatsApi#get_advanced_team_game_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get advanced season team stats
    # Advanced team season stats
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if no team specified)
    # @option opts [String] :team Team filter (required if no year specified)
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @option opts [Integer] :start_week Starting week filter
    # @option opts [Integer] :end_week Starting week filter
    # @return [Array<AdvancedSeasonStat>]
    def get_advanced_team_season_stats(opts = {})
      data, _status_code, _headers = get_advanced_team_season_stats_with_http_info(opts)
      data
    end

    # Get advanced season team stats
    # Advanced team season stats
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if no team specified)
    # @option opts [String] :team Team filter (required if no year specified)
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @option opts [Integer] :start_week Starting week filter
    # @option opts [Integer] :end_week Starting week filter
    # @return [Array<(Array<AdvancedSeasonStat>, Fixnum, Hash)>] Array<AdvancedSeasonStat> data, response status code and response headers
    def get_advanced_team_season_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatsApi.get_advanced_team_season_stats ...'
      end
      # resource path
      local_var_path = '/stats/season/advanced'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?
      query_params[:'startWeek'] = opts[:'start_week'] if !opts[:'start_week'].nil?
      query_params[:'endWeek'] = opts[:'end_week'] if !opts[:'end_week'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AdvancedSeasonStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatsApi#get_advanced_team_season_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get stat category list
    # Stat category list
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_stat_categories(opts = {})
      data, _status_code, _headers = get_stat_categories_with_http_info(opts)
      data
    end

    # Get stat category list
    # Stat category list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_stat_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatsApi.get_stat_categories ...'
      end
      # resource path
      local_var_path = '/stats/categories'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatsApi#get_stat_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get season team stats
    # Team season stats
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if no team specified)
    # @option opts [String] :team Team filter (required if no year specified)
    # @option opts [String] :conference Conference abbreviation filter
    # @option opts [Integer] :start_week Starting week filter
    # @option opts [Integer] :end_week Starting week filter
    # @return [Array<TeamSeasonStat>]
    def get_team_season_stats(opts = {})
      data, _status_code, _headers = get_team_season_stats_with_http_info(opts)
      data
    end

    # Get season team stats
    # Team season stats
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if no team specified)
    # @option opts [String] :team Team filter (required if no year specified)
    # @option opts [String] :conference Conference abbreviation filter
    # @option opts [Integer] :start_week Starting week filter
    # @option opts [Integer] :end_week Starting week filter
    # @return [Array<(Array<TeamSeasonStat>, Fixnum, Hash)>] Array<TeamSeasonStat> data, response status code and response headers
    def get_team_season_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatsApi.get_team_season_stats ...'
      end
      # resource path
      local_var_path = '/stats/season'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?
      query_params[:'startWeek'] = opts[:'start_week'] if !opts[:'start_week'].nil?
      query_params[:'endWeek'] = opts[:'end_week'] if !opts[:'end_week'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamSeasonStat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatsApi#get_team_season_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

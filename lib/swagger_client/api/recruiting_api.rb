=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module SwaggerClient
  class RecruitingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get position group aggregated ratings
    # Gets a list of aggregated statistics by team and position grouping
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_year Starting year
    # @option opts [Integer] :end_year Ending year
    # @option opts [String] :team Team filter
    # @option opts [String] :conference conference filter
    # @return [Array<PositionGroupRecruitingRating>]
    def get_recruiting_groups(opts = {})
      data, _status_code, _headers = get_recruiting_groups_with_http_info(opts)
      data
    end

    # Get position group aggregated ratings
    # Gets a list of aggregated statistics by team and position grouping
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_year Starting year
    # @option opts [Integer] :end_year Ending year
    # @option opts [String] :team Team filter
    # @option opts [String] :conference conference filter
    # @return [Array<(Array<PositionGroupRecruitingRating>, Fixnum, Hash)>] Array<PositionGroupRecruitingRating> data, response status code and response headers
    def get_recruiting_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecruitingApi.get_recruiting_groups ...'
      end
      # resource path
      local_var_path = '/recruiting/groups'

      # query parameters
      query_params = {}
      query_params[:'startYear'] = opts[:'start_year'] if !opts[:'start_year'].nil?
      query_params[:'endYear'] = opts[:'end_year'] if !opts[:'end_year'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PositionGroupRecruitingRating>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecruitingApi#get_recruiting_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get player recruiting rankings and data. Requires either a year or team to be specified.
    # Player recruiting rankings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Recruiting class year (required if team no specified)
    # @option opts [String] :classification Type of recruit (HighSchool, JUCO, PrepSchool) (default to HighSchool)
    # @option opts [String] :position Position abbreviation filter
    # @option opts [String] :state State or province abbreviation filter
    # @option opts [String] :team Committed team filter (required if year not specified)
    # @return [Array<Recruit>]
    def get_recruiting_players(opts = {})
      data, _status_code, _headers = get_recruiting_players_with_http_info(opts)
      data
    end

    # Get player recruiting rankings and data. Requires either a year or team to be specified.
    # Player recruiting rankings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Recruiting class year (required if team no specified)
    # @option opts [String] :classification Type of recruit (HighSchool, JUCO, PrepSchool)
    # @option opts [String] :position Position abbreviation filter
    # @option opts [String] :state State or province abbreviation filter
    # @option opts [String] :team Committed team filter (required if year not specified)
    # @return [Array<(Array<Recruit>, Fixnum, Hash)>] Array<Recruit> data, response status code and response headers
    def get_recruiting_players_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecruitingApi.get_recruiting_players ...'
      end
      # resource path
      local_var_path = '/recruiting/players'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'classification'] = opts[:'classification'] if !opts[:'classification'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Recruit>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecruitingApi#get_recruiting_players\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get team recruiting rankings
    # Team recruiting rankings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Recruiting class year
    # @option opts [String] :team Team filter
    # @return [Array<TeamRecruitingRank>]
    def get_recruiting_teams(opts = {})
      data, _status_code, _headers = get_recruiting_teams_with_http_info(opts)
      data
    end

    # Get team recruiting rankings
    # Team recruiting rankings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Recruiting class year
    # @option opts [String] :team Team filter
    # @return [Array<(Array<TeamRecruitingRank>, Fixnum, Hash)>] Array<TeamRecruitingRank> data, response status code and response headers
    def get_recruiting_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecruitingApi.get_recruiting_teams ...'
      end
      # resource path
      local_var_path = '/recruiting/teams'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamRecruitingRank>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecruitingApi#get_recruiting_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

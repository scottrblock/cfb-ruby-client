=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module SwaggerClient
  class PlayersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get player usage metrics for the season
    # Player usage metrics by season
    # @param year Year filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team Team filter
    # @option opts [String] :conference Conference abbreviation filter
    # @option opts [String] :position Position abbreviation filter
    # @option opts [Integer] :player_id Player id filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<PlayerUsage>]
    def get_player_usage(year, opts = {})
      data, _status_code, _headers = get_player_usage_with_http_info(year, opts)
      data
    end

    # Get player usage metrics for the season
    # Player usage metrics by season
    # @param year Year filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team Team filter
    # @option opts [String] :conference Conference abbreviation filter
    # @option opts [String] :position Position abbreviation filter
    # @option opts [Integer] :player_id Player id filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<(Array<PlayerUsage>, Fixnum, Hash)>] Array<PlayerUsage> data, response status code and response headers
    def get_player_usage_with_http_info(year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player_usage ...'
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling PlayersApi.get_player_usage"
      end
      # resource path
      local_var_path = '/player/usage'

      # query parameters
      query_params = {}
      query_params[:'year'] = year
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'playerId'] = opts[:'player_id'] if !opts[:'player_id'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayerUsage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for players
    # Search for players
    # @param search_term Term to search on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :position Position abbreviation filter
    # @option opts [String] :team Team filter
    # @return [Array<PlayerSearchResult>]
    def player_search(search_term, opts = {})
      data, _status_code, _headers = player_search_with_http_info(search_term, opts)
      data
    end

    # Search for players
    # Search for players
    # @param search_term Term to search on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :position Position abbreviation filter
    # @option opts [String] :team Team filter
    # @return [Array<(Array<PlayerSearchResult>, Fixnum, Hash)>] Array<PlayerSearchResult> data, response status code and response headers
    def player_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.player_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling PlayersApi.player_search"
      end
      # resource path
      local_var_path = '/player/search'

      # query parameters
      query_params = {}
      query_params[:'searchTerm'] = search_term
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayerSearchResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#player_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module SwaggerClient
  class MetricsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get team game averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA) by game
    # @param year Year filter
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @option opts [String] :conference Conference filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<GamePPA>]
    def get_game_ppa(year, opts = {})
      data, _status_code, _headers = get_game_ppa_with_http_info(year, opts)
      data
    end

    # Get team game averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA) by game
    # @param year Year filter
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @option opts [String] :conference Conference filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<(Array<GamePPA>, Fixnum, Hash)>] Array<GamePPA> data, response status code and response headers
    def get_game_ppa_with_http_info(year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_game_ppa ...'
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling MetricsApi.get_game_ppa"
      end
      # resource path
      local_var_path = '/ppa/games'

      # query parameters
      query_params = {}
      query_params[:'year'] = year
      query_params[:'week'] = opts[:'week'] if !opts[:'week'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GamePPA>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_game_ppa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get player game averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA) by player game
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @option opts [String] :position Position abbreviation filter
    # @option opts [Integer] :player_id Player id filter
    # @option opts [String] :threshold Minimum play threshold filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<PlayerGamePPA>]
    def get_player_game_ppa(opts = {})
      data, _status_code, _headers = get_player_game_ppa_with_http_info(opts)
      data
    end

    # Get player game averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA) by player game
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @option opts [String] :position Position abbreviation filter
    # @option opts [Integer] :player_id Player id filter
    # @option opts [String] :threshold Minimum play threshold filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<(Array<PlayerGamePPA>, Fixnum, Hash)>] Array<PlayerGamePPA> data, response status code and response headers
    def get_player_game_ppa_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_player_game_ppa ...'
      end
      # resource path
      local_var_path = '/ppa/players/games'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'week'] = opts[:'week'] if !opts[:'week'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'playerId'] = opts[:'player_id'] if !opts[:'player_id'].nil?
      query_params[:'threshold'] = opts[:'threshold'] if !opts[:'threshold'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayerGamePPA>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_player_game_ppa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get player season averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA) by player season
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [String] :team Team filter
    # @option opts [String] :conference Conference abbreviation filter
    # @option opts [String] :position Position abbreviation filter
    # @option opts [Integer] :player_id Player id filter
    # @option opts [String] :threshold Minimum play threshold filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<PlayerSeasonPPA>]
    def get_player_season_ppa(opts = {})
      data, _status_code, _headers = get_player_season_ppa_with_http_info(opts)
      data
    end

    # Get player season averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA) by player season
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [String] :team Team filter
    # @option opts [String] :conference Conference abbreviation filter
    # @option opts [String] :position Position abbreviation filter
    # @option opts [Integer] :player_id Player id filter
    # @option opts [String] :threshold Minimum play threshold filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<(Array<PlayerSeasonPPA>, Fixnum, Hash)>] Array<PlayerSeasonPPA> data, response status code and response headers
    def get_player_season_ppa_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_player_season_ppa ...'
      end
      # resource path
      local_var_path = '/ppa/players/season'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'playerId'] = opts[:'player_id'] if !opts[:'player_id'].nil?
      query_params[:'threshold'] = opts[:'threshold'] if !opts[:'threshold'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayerSeasonPPA>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_player_season_ppa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Calculate Predicted Points
    # Predicted Points
    # @param down Down filter
    # @param distance Distance filter
    # @param [Hash] opts the optional parameters
    # @return [Array<PredictedPoints>]
    def get_predicted_points(down, distance, opts = {})
      data, _status_code, _headers = get_predicted_points_with_http_info(down, distance, opts)
      data
    end

    # Calculate Predicted Points
    # Predicted Points
    # @param down Down filter
    # @param distance Distance filter
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PredictedPoints>, Fixnum, Hash)>] Array<PredictedPoints> data, response status code and response headers
    def get_predicted_points_with_http_info(down, distance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_predicted_points ...'
      end
      # verify the required parameter 'down' is set
      if @api_client.config.client_side_validation && down.nil?
        fail ArgumentError, "Missing the required parameter 'down' when calling MetricsApi.get_predicted_points"
      end
      # verify the required parameter 'distance' is set
      if @api_client.config.client_side_validation && distance.nil?
        fail ArgumentError, "Missing the required parameter 'distance' when calling MetricsApi.get_predicted_points"
      end
      # resource path
      local_var_path = '/ppa/predicted'

      # query parameters
      query_params = {}
      query_params[:'down'] = down
      query_params[:'distance'] = distance

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PredictedPoints>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_predicted_points\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get pregame win probabilities
    # Pregame win probabilities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @return [Array<PregameWP>]
    def get_pregame_win_probabilities(opts = {})
      data, _status_code, _headers = get_pregame_win_probabilities_with_http_info(opts)
      data
    end

    # Get pregame win probabilities
    # Pregame win probabilities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter
    # @option opts [Integer] :week Week filter
    # @option opts [String] :team Team filter
    # @return [Array<(Array<PregameWP>, Fixnum, Hash)>] Array<PregameWP> data, response status code and response headers
    def get_pregame_win_probabilities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_pregame_win_probabilities ...'
      end
      # resource path
      local_var_path = '/metrics/wp/pregame'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'week'] = opts[:'week'] if !opts[:'week'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PregameWP>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_pregame_win_probabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get team averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if team not specified)
    # @option opts [String] :team Team filter (required if year not specified)
    # @option opts [String] :conference Conference filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<TeamPPA>]
    def get_team_ppa(opts = {})
      data, _status_code, _headers = get_team_ppa_with_http_info(opts)
      data
    end

    # Get team averages for Predicted Points Added (PPA)
    # Predicted Points Added (PPA)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year filter (required if team not specified)
    # @option opts [String] :team Team filter (required if year not specified)
    # @option opts [String] :conference Conference filter
    # @option opts [BOOLEAN] :exclude_garbage_time Filter to remove garbage time plays from calculations
    # @return [Array<(Array<TeamPPA>, Fixnum, Hash)>] Array<TeamPPA> data, response status code and response headers
    def get_team_ppa_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_team_ppa ...'
      end
      # resource path
      local_var_path = '/ppa/teams'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'team'] = opts[:'team'] if !opts[:'team'].nil?
      query_params[:'conference'] = opts[:'conference'] if !opts[:'conference'].nil?
      query_params[:'excludeGarbageTime'] = opts[:'exclude_garbage_time'] if !opts[:'exclude_garbage_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamPPA>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_team_ppa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get win probability chart data
    # Win probability data
    # @param game_id Game id filter
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :adjust_for_spread Toggles pregame spread adjustments (default to true)
    # @return [Array<PlayWP>]
    def get_win_probability_data(game_id, opts = {})
      data, _status_code, _headers = get_win_probability_data_with_http_info(game_id, opts)
      data
    end

    # Get win probability chart data
    # Win probability data
    # @param game_id Game id filter
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :adjust_for_spread Toggles pregame spread adjustments
    # @return [Array<(Array<PlayWP>, Fixnum, Hash)>] Array<PlayWP> data, response status code and response headers
    def get_win_probability_data_with_http_info(game_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_win_probability_data ...'
      end
      # verify the required parameter 'game_id' is set
      if @api_client.config.client_side_validation && game_id.nil?
        fail ArgumentError, "Missing the required parameter 'game_id' when calling MetricsApi.get_win_probability_data"
      end
      # resource path
      local_var_path = '/metrics/wp'

      # query parameters
      query_params = {}
      query_params[:'gameId'] = game_id
      query_params[:'adjustForSpread'] = opts[:'adjust_for_spread'] if !opts[:'adjust_for_spread'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlayWP>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_win_probability_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

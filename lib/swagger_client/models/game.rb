=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module SwaggerClient
  class Game
    attr_accessor :id

    attr_accessor :season

    attr_accessor :week

    attr_accessor :season_type

    attr_accessor :start_date

    attr_accessor :neutral_site

    attr_accessor :conference_game

    attr_accessor :attendance

    attr_accessor :venue_id

    attr_accessor :venue

    attr_accessor :home_team

    attr_accessor :home_conference

    attr_accessor :home_points

    attr_accessor :home_line_scores

    attr_accessor :home_post_win_prob

    attr_accessor :away_team

    attr_accessor :away_conference

    attr_accessor :away_points

    attr_accessor :away_line_scores

    attr_accessor :away_post_win_prob

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'season' => :'season',
        :'week' => :'week',
        :'season_type' => :'season_type',
        :'start_date' => :'start_date',
        :'neutral_site' => :'neutral_site',
        :'conference_game' => :'conference_game',
        :'attendance' => :'attendance',
        :'venue_id' => :'venue_id',
        :'venue' => :'venue',
        :'home_team' => :'home_team',
        :'home_conference' => :'home_conference',
        :'home_points' => :'home_points',
        :'home_line_scores' => :'home_line_scores',
        :'home_post_win_prob' => :'home_post_win_prob',
        :'away_team' => :'away_team',
        :'away_conference' => :'away_conference',
        :'away_points' => :'away_points',
        :'away_line_scores' => :'away_line_scores',
        :'away_post_win_prob' => :'away_post_win_prob'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'season' => :'Integer',
        :'week' => :'Integer',
        :'season_type' => :'String',
        :'start_date' => :'String',
        :'neutral_site' => :'BOOLEAN',
        :'conference_game' => :'BOOLEAN',
        :'attendance' => :'Integer',
        :'venue_id' => :'Integer',
        :'venue' => :'String',
        :'home_team' => :'String',
        :'home_conference' => :'String',
        :'home_points' => :'Integer',
        :'home_line_scores' => :'Array<Integer>',
        :'home_post_win_prob' => :'Float',
        :'away_team' => :'String',
        :'away_conference' => :'String',
        :'away_points' => :'Integer',
        :'away_line_scores' => :'Array<Integer>',
        :'away_post_win_prob' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'season')
        self.season = attributes[:'season']
      end

      if attributes.has_key?(:'week')
        self.week = attributes[:'week']
      end

      if attributes.has_key?(:'season_type')
        self.season_type = attributes[:'season_type']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'neutral_site')
        self.neutral_site = attributes[:'neutral_site']
      end

      if attributes.has_key?(:'conference_game')
        self.conference_game = attributes[:'conference_game']
      end

      if attributes.has_key?(:'attendance')
        self.attendance = attributes[:'attendance']
      end

      if attributes.has_key?(:'venue_id')
        self.venue_id = attributes[:'venue_id']
      end

      if attributes.has_key?(:'venue')
        self.venue = attributes[:'venue']
      end

      if attributes.has_key?(:'home_team')
        self.home_team = attributes[:'home_team']
      end

      if attributes.has_key?(:'home_conference')
        self.home_conference = attributes[:'home_conference']
      end

      if attributes.has_key?(:'home_points')
        self.home_points = attributes[:'home_points']
      end

      if attributes.has_key?(:'home_line_scores')
        if (value = attributes[:'home_line_scores']).is_a?(Array)
          self.home_line_scores = value
        end
      end

      if attributes.has_key?(:'home_post_win_prob')
        self.home_post_win_prob = attributes[:'home_post_win_prob']
      end

      if attributes.has_key?(:'away_team')
        self.away_team = attributes[:'away_team']
      end

      if attributes.has_key?(:'away_conference')
        self.away_conference = attributes[:'away_conference']
      end

      if attributes.has_key?(:'away_points')
        self.away_points = attributes[:'away_points']
      end

      if attributes.has_key?(:'away_line_scores')
        if (value = attributes[:'away_line_scores']).is_a?(Array)
          self.away_line_scores = value
        end
      end

      if attributes.has_key?(:'away_post_win_prob')
        self.away_post_win_prob = attributes[:'away_post_win_prob']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          season == o.season &&
          week == o.week &&
          season_type == o.season_type &&
          start_date == o.start_date &&
          neutral_site == o.neutral_site &&
          conference_game == o.conference_game &&
          attendance == o.attendance &&
          venue_id == o.venue_id &&
          venue == o.venue &&
          home_team == o.home_team &&
          home_conference == o.home_conference &&
          home_points == o.home_points &&
          home_line_scores == o.home_line_scores &&
          home_post_win_prob == o.home_post_win_prob &&
          away_team == o.away_team &&
          away_conference == o.away_conference &&
          away_points == o.away_points &&
          away_line_scores == o.away_line_scores &&
          away_post_win_prob == o.away_post_win_prob
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, season, week, season_type, start_date, neutral_site, conference_game, attendance, venue_id, venue, home_team, home_conference, home_points, home_line_scores, home_post_win_prob, away_team, away_conference, away_points, away_line_scores, away_post_win_prob].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

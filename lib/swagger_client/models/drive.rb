=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module SwaggerClient
  class Drive
    attr_accessor :offense

    attr_accessor :offense_conference

    attr_accessor :defense

    attr_accessor :defense_conference

    attr_accessor :id

    attr_accessor :game_id

    attr_accessor :scoring

    attr_accessor :start_period

    attr_accessor :start_yardline

    attr_accessor :start_time

    attr_accessor :end_period

    attr_accessor :end_yardline

    attr_accessor :end_time

    attr_accessor :plays

    attr_accessor :yards

    attr_accessor :drive_result

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'offense' => :'offense',
        :'offense_conference' => :'offense_conference',
        :'defense' => :'defense',
        :'defense_conference' => :'defense_conference',
        :'id' => :'id',
        :'game_id' => :'game_id',
        :'scoring' => :'scoring',
        :'start_period' => :'start_period',
        :'start_yardline' => :'start_yardline',
        :'start_time' => :'start_time',
        :'end_period' => :'end_period',
        :'end_yardline' => :'end_yardline',
        :'end_time' => :'end_time',
        :'plays' => :'plays',
        :'yards' => :'yards',
        :'drive_result' => :'drive_result'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'offense' => :'String',
        :'offense_conference' => :'String',
        :'defense' => :'String',
        :'defense_conference' => :'String',
        :'id' => :'Integer',
        :'game_id' => :'Integer',
        :'scoring' => :'BOOLEAN',
        :'start_period' => :'Integer',
        :'start_yardline' => :'Integer',
        :'start_time' => :'DriveStartTime',
        :'end_period' => :'Integer',
        :'end_yardline' => :'Integer',
        :'end_time' => :'DriveStartTime',
        :'plays' => :'Integer',
        :'yards' => :'Integer',
        :'drive_result' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'offense')
        self.offense = attributes[:'offense']
      end

      if attributes.has_key?(:'offense_conference')
        self.offense_conference = attributes[:'offense_conference']
      end

      if attributes.has_key?(:'defense')
        self.defense = attributes[:'defense']
      end

      if attributes.has_key?(:'defense_conference')
        self.defense_conference = attributes[:'defense_conference']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'game_id')
        self.game_id = attributes[:'game_id']
      end

      if attributes.has_key?(:'scoring')
        self.scoring = attributes[:'scoring']
      end

      if attributes.has_key?(:'start_period')
        self.start_period = attributes[:'start_period']
      end

      if attributes.has_key?(:'start_yardline')
        self.start_yardline = attributes[:'start_yardline']
      end

      if attributes.has_key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.has_key?(:'end_period')
        self.end_period = attributes[:'end_period']
      end

      if attributes.has_key?(:'end_yardline')
        self.end_yardline = attributes[:'end_yardline']
      end

      if attributes.has_key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.has_key?(:'plays')
        self.plays = attributes[:'plays']
      end

      if attributes.has_key?(:'yards')
        self.yards = attributes[:'yards']
      end

      if attributes.has_key?(:'drive_result')
        self.drive_result = attributes[:'drive_result']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          offense == o.offense &&
          offense_conference == o.offense_conference &&
          defense == o.defense &&
          defense_conference == o.defense_conference &&
          id == o.id &&
          game_id == o.game_id &&
          scoring == o.scoring &&
          start_period == o.start_period &&
          start_yardline == o.start_yardline &&
          start_time == o.start_time &&
          end_period == o.end_period &&
          end_yardline == o.end_yardline &&
          end_time == o.end_time &&
          plays == o.plays &&
          yards == o.yards &&
          drive_result == o.drive_result
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [offense, offense_conference, defense, defense_conference, id, game_id, scoring, start_period, start_yardline, start_time, end_period, end_yardline, end_time, plays, yards, drive_result].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

=begin
#College Football Data API

#This is an API for accessing all sorts of college football data.  It currently has a wide array of data ranging from play by play to player statistics to game scores and more.

OpenAPI spec version: 1.20.0
Contact: admin@collegefootballdata.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module SwaggerClient
  class PlayWP
    attr_accessor :play_id

    attr_accessor :play_text

    attr_accessor :home_id

    attr_accessor :home

    attr_accessor :away_id

    attr_accessor :away

    attr_accessor :spread

    attr_accessor :home_ball

    attr_accessor :home_score

    attr_accessor :away_score

    attr_accessor :time_remaining

    attr_accessor :yard_line

    attr_accessor :down

    attr_accessor :distance

    attr_accessor :home_winner

    attr_accessor :home_win_prob

    attr_accessor :play_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'play_id' => :'playId',
        :'play_text' => :'playText',
        :'home_id' => :'homeId',
        :'home' => :'home',
        :'away_id' => :'awayId',
        :'away' => :'away',
        :'spread' => :'spread',
        :'home_ball' => :'homeBall',
        :'home_score' => :'homeScore',
        :'away_score' => :'awayScore',
        :'time_remaining' => :'timeRemaining',
        :'yard_line' => :'yardLine',
        :'down' => :'down',
        :'distance' => :'distance',
        :'home_winner' => :'homeWinner',
        :'home_win_prob' => :'homeWinProb',
        :'play_number' => :'playNumber'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'play_id' => :'Integer',
        :'play_text' => :'String',
        :'home_id' => :'Integer',
        :'home' => :'String',
        :'away_id' => :'Integer',
        :'away' => :'String',
        :'spread' => :'Float',
        :'home_ball' => :'BOOLEAN',
        :'home_score' => :'Integer',
        :'away_score' => :'Integer',
        :'time_remaining' => :'Integer',
        :'yard_line' => :'Integer',
        :'down' => :'Integer',
        :'distance' => :'Integer',
        :'home_winner' => :'BOOLEAN',
        :'home_win_prob' => :'Float',
        :'play_number' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'playId')
        self.play_id = attributes[:'playId']
      end

      if attributes.has_key?(:'playText')
        self.play_text = attributes[:'playText']
      end

      if attributes.has_key?(:'homeId')
        self.home_id = attributes[:'homeId']
      end

      if attributes.has_key?(:'home')
        self.home = attributes[:'home']
      end

      if attributes.has_key?(:'awayId')
        self.away_id = attributes[:'awayId']
      end

      if attributes.has_key?(:'away')
        self.away = attributes[:'away']
      end

      if attributes.has_key?(:'spread')
        self.spread = attributes[:'spread']
      end

      if attributes.has_key?(:'homeBall')
        self.home_ball = attributes[:'homeBall']
      end

      if attributes.has_key?(:'homeScore')
        self.home_score = attributes[:'homeScore']
      end

      if attributes.has_key?(:'awayScore')
        self.away_score = attributes[:'awayScore']
      end

      if attributes.has_key?(:'timeRemaining')
        self.time_remaining = attributes[:'timeRemaining']
      end

      if attributes.has_key?(:'yardLine')
        self.yard_line = attributes[:'yardLine']
      end

      if attributes.has_key?(:'down')
        self.down = attributes[:'down']
      end

      if attributes.has_key?(:'distance')
        self.distance = attributes[:'distance']
      end

      if attributes.has_key?(:'homeWinner')
        self.home_winner = attributes[:'homeWinner']
      end

      if attributes.has_key?(:'homeWinProb')
        self.home_win_prob = attributes[:'homeWinProb']
      end

      if attributes.has_key?(:'playNumber')
        self.play_number = attributes[:'playNumber']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          play_id == o.play_id &&
          play_text == o.play_text &&
          home_id == o.home_id &&
          home == o.home &&
          away_id == o.away_id &&
          away == o.away &&
          spread == o.spread &&
          home_ball == o.home_ball &&
          home_score == o.home_score &&
          away_score == o.away_score &&
          time_remaining == o.time_remaining &&
          yard_line == o.yard_line &&
          down == o.down &&
          distance == o.distance &&
          home_winner == o.home_winner &&
          home_win_prob == o.home_win_prob &&
          play_number == o.play_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [play_id, play_text, home_id, home, away_id, away, spread, home_ball, home_score, away_score, time_remaining, yard_line, down, distance, home_winner, home_win_prob, play_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
